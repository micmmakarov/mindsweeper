!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define("MyLibrary",[],t):"object"==typeof exports?exports.MyLibrary=t():e.MyLibrary=t()}(this,(()=>(()=>{"use strict";var e={d:(t,s)=>{for(var i in s)e.o(s,i)&&!e.o(t,i)&&Object.defineProperty(t,i,{enumerable:!0,get:s[i]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r:e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})}},t={};e.r(t),e.d(t,{default:()=>o});const s=[{x:-1,y:0},{x:1,y:0},{x:0,y:-1},{x:0,y:1}],i=[{x:-1,y:-1},{x:1,y:1},{x:1,y:-1},{x:-1,y:1},...s],o=class{constructor(e={size:{height:1,width:1},mines:0}){this.lost=!1;const{size:t,mines:s}=e;this.size=t,this.minesCount=s,this.generate()}generate(){const e=[];for(let t=0;t<this.size.height;t++){const s=[];for(let e=0;e<this.size.width;e++){const i={x:e,y:t};s.push({opened:!1,hasMine:!1,marked:!1,mines:0,location:i})}e.push(s)}this.field=e,this.setMines()}setMines(){const e=this.field.slice().flat();this.mines=[];for(let t=0;t<this.minesCount;t++){const t=e.splice(~~(Math.random()*e.length),1)[0];t.hasMine=!0,this.mines.push(t)}this.mines.forEach((e=>{const{x:t,y:s}=e.location;i.forEach((e=>{const i=this.getCell({x:t+e.x,y:s+e.y});i&&!i.hasMine&&i.mines++}))}))}getCell(e){var t;return null===(t=this.field[e.y])||void 0===t?void 0:t[e.x]}traverse(e,t={}){const i=Object.values(e).join("-");if(!((e,t)=>e.x>=0&&e.y>=0&&e.x<t.width&&e.y<t.height)(e,this.size)||t[i])return;t[i]=!0;const o=this.getCell(e);o.hasMine||(o.opened=!0,s.forEach((s=>{return this.traverse((o=s,{x:(i=e).x+o.x,y:i.y+o.y}),t);var i,o})))}open(e){this.getCell(e).hasMine?this.lost=!0:this.traverse(e)}mark(e){this.getCell(e).marked=!0}openAll(){this.field.flat().forEach((e=>e.opened=!0))}};return t})()));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,