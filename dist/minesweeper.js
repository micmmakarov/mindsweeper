!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define("MyLibrary",[],t):"object"==typeof exports?exports.MyLibrary=t():e.MyLibrary=t()}(this,(()=>(()=>{"use strict";var e={d:(t,s)=>{for(var i in s)e.o(s,i)&&!e.o(t,i)&&Object.defineProperty(t,i,{enumerable:!0,get:s[i]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r:e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})}},t={};e.r(t),e.d(t,{default:()=>i});const s=[{x:-1,y:0},{x:1,y:0},{x:0,y:-1},{x:0,y:1}],i=class{constructor(e={size:{height:1,width:1},mines:0}){this.lost=!1;const{size:t,mines:s}=e;this.size=t,this.mines=s,this.generate()}generate(){const e=[];for(let t=0;t<this.size.height;t++){const t=[];for(let e=0;e<this.size.width;e++)t.push({opened:!1,hasMine:!1,marked:!1});e.push(t)}this.field=e,this.setMines()}setMines(){const e=this.field.slice().flat();for(let t=0;t<this.mines;t++)e.splice(~~(Math.random()*e.length),1)[0].hasMine=!0}getCell(e){return this.field[e.y][e.x]}traverse(e,t={}){const i=Object.values(e).join("-");if(!((e,t)=>e.x>=0&&e.y>=0&&e.x<t.width&&e.y<t.height)(e,this.size)||t[i])return;t[i]=!0;const o=this.getCell(e);o.hasMine||(o.opened=!0,s.forEach((s=>{return this.traverse((o=s,{x:(i=e).x+o.x,y:i.y+o.y}),t);var i,o})))}open(e){this.getCell(e).hasMine?this.lost=!0:this.traverse(e)}};return t})()));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,